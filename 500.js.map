{"version":3,"file":"500.js","mappings":"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","sources":["webpack://@dev/web/./src/components/DonutChart/styles.module.scss?a1ed","webpack://@dev/web/./src/components/DonutChart/index.tsx","webpack://@dev/web/./src/containers/Quotes/styles.module.scss?548c","webpack://@dev/web/./src/containers/Quotes/Investments.tsx","webpack://@dev/web/./src/containers/Quotes/Transactions.tsx","webpack://@dev/web/./src/containers/Quotes/index.tsx","webpack://@dev/web/./src/components/DonutChart/styles.module.scss","webpack://@dev/web/./src/containers/Quotes/styles.module.scss","webpack://@dev/web/../../node_modules/date-fns/esm/addDays/index.js","webpack://@dev/web/../../node_modules/date-fns/esm/addMonths/index.js","webpack://@dev/web/../../node_modules/date-fns/esm/subDays/index.js","webpack://@dev/web/../../node_modules/date-fns/esm/subMonths/index.js","webpack://@dev/web/../../node_modules/date-fns/esm/sub/index.js","webpack://@dev/web/../../node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js","webpack://@dev/web/../../node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","webpack://@dev/web/../../node_modules/rxjs/dist/esm5/internal/operators/map.js"],"sourcesContent":["\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { PieArcDatum } from \"d3-shape\";\nimport cx from \"classnames\";\nimport styles from \"./styles.module.scss\";\n\n// https://medium.com/react-courses/drawing-basic-charts-with-react-typescript-d3-part-ii-pie-scatter-chart-da4fc653b715\ntype Data = {\n  label: string;\n  value: number;\n};\n\nexport default function Chart({\n  list,\n}: {\n  list: { label: string; value: number }[];\n}) {\n  const groupRef = useRef<SVGGeometryElement>(null);\n  const innerRadius = 60;\n  const outerRadius = 130;\n\n  // https://codesandbox.io/s/r5wp0v08xq\n  useEffect(() => {\n    const createPie = d3\n      .pie<Data>()\n      .value((d) => d.value)\n      .sort(null);\n    const createArc = d3\n      .arc<PieArcDatum<Data>>()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius);\n    const colors = d3.scaleOrdinal(d3.schemeCategory10);\n\n    const data = createPie(list);\n    const group = d3.select(groupRef.current);\n    const groupWithData = group.selectAll(\"g.arc\").data(data);\n\n    groupWithData.exit().remove();\n\n    const groupWithUpdate = groupWithData\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"arc\");\n\n    const path = groupWithUpdate\n      .append(\"path\")\n      .merge(groupWithData.select(\"path.arc\"));\n\n    path\n      .attr(\"class\", \"arc\")\n      .attr(\"d\", createArc)\n      .attr(\"fill\", (d, i) => colors(i));\n\n    const text = groupWithUpdate\n      .append(\"text\")\n      .merge(groupWithData.select(\"text\"));\n\n    text\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"alignment-baseline\", \"middle\")\n      .attr(\"transform\", (d) => `translate(${createArc.centroid(d)})`)\n      .style(\"fill\", \"white\")\n      .style(\"font-size\", 10)\n      .text(({ data }) => `${data.label} (${data.value})`);\n  }, [list]);\n\n  return (\n    <div className={cx(styles.Chart)}>\n      <svg>\n        <g\n          ref={groupRef}\n          transform={`translate(${outerRadius + 20} ${outerRadius + 20})`}\n        />\n      </svg>\n    </div>\n  );\n}\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, {\n  ChangeEventHandler,\n  MouseEventHandler,\n  useCallback,\n  useMemo,\n  useState,\n} from \"react\";\nimport { format, sub } from \"date-fns\";\nimport cx from \"classnames\";\nimport styles from \"./styles.module.scss\";\n\nfunction getValueNearDate(values, date) {\n  for (let i = 0; i < 5; i++) {\n    const value = values[format(date, \"yyyy-MM-dd\")];\n    if (value) {\n      return value;\n    }\n    date = sub(date, {\n      days: 1,\n    });\n  }\n}\n\nexport function Percent({ value }: { value: number }) {\n  return isNaN(value) ? null : (\n    <div\n      className={cx(\n        styles.Percent,\n        value === 0 ? styles.eq : value > 0 ? styles.gt : styles.lt\n      )}\n    >\n      {new Intl.NumberFormat(\"pl-PL\", {\n        minimumFractionDigits: 2,\n      }).format(Math.round(100 * 100 * value) / 100)}\n      &nbsp;%\n    </div>\n  );\n}\n\nexport default function Investments({\n  investments,\n  rates,\n  selected,\n  setSelected,\n}: {\n  investments: { id: number; name: string }[];\n  rates: Record<string, Record<string, number>>;\n  selected: number[];\n  setSelected: Function;\n}) {\n  const [expanded, setExpanded] = useState<number[]>([]);\n  const list = useMemo(\n    () =>\n      investments.map((item) => {\n        const [date, unitValue] = Object.entries(rates[item.id]).pop();\n\n        return {\n          ...item,\n          date: new Date(date),\n          unitValue,\n        };\n      }),\n    [rates]\n  );\n\n  return (\n    <div className={styles.Investments}>\n      <h3>Investments</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>\n              <input\n                type=\"checkbox\"\n                checked={selected.length === investments.length}\n                onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                  ({ target }) =>\n                    setSelected(\n                      target.checked ? investments.map(({ id }) => id) : []\n                    ),\n                  []\n                )}\n              />\n            </th>\n            <th>Fundusz</th>\n            <th>Data wyceny jednostki</th>\n            <th>Wycena jednostki</th>\n            <th>7d</th>\n            <th>14d</th>\n            <th>1m</th>\n            <th>3m</th>\n            <th>6m</th>\n            <th>12m</th>\n            <th>24m</th>\n            <th>36m</th>\n          </tr>\n          {list.map((item, i) =>\n            [\n              <tr key={i}>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    checked={selected.includes(item.id)}\n                    onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                      ({ target }) =>\n                        setSelected((selected: number[]) =>\n                          !target.checked\n                            ? selected.filter((id) => id !== item.id)\n                            : selected.concat(item.id)\n                        ),\n                      []\n                    )}\n                  />\n                </td>\n                <td>\n                  <a\n                    href=\"#\"\n                    onClick={useCallback<MouseEventHandler>(\n                      (e) => (\n                        e.preventDefault(),\n                        setExpanded((expanded) =>\n                          expanded.includes(item.id)\n                            ? expanded.filter((id) => id !== item.id)\n                            : expanded.concat(item.id)\n                        )\n                      ),\n                      []\n                    )}\n                  >\n                    {item.name}\n                  </a>\n                </td>\n                <td align=\"right\">{format(item.date, \"dd.MM.yyyy\")}</td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(item.unitValue)}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            days: 7,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            days: 14,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            months: 1,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        rates[item.id][\n                          format(\n                            sub(item.date, {\n                              months: 3,\n                            }),\n                            \"yyyy-MM-dd\"\n                          )\n                        ] -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            months: 6,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            months: 12,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            months: 24,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      item.unitValue /\n                        getValueNearDate(\n                          rates[item.id],\n                          sub(item.date, {\n                            months: 36,\n                          })\n                        ) -\n                      1\n                    }\n                  />\n                </td>\n              </tr>,\n            ].concat(\n              expanded.includes(item.id)\n                ? [\n                    <tr key={`${i}-details`}>\n                      <td></td>\n                      <td colSpan={11}>\n                        <pre>{JSON.stringify(item, null, 2)}</pre>\n                        <pre>{JSON.stringify(rates[item.id], null, 2)}</pre>\n                      </td>\n                    </tr>,\n                  ]\n                : []\n            )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, {\n  ChangeEventHandler,\n  MouseEventHandler,\n  useCallback,\n  useMemo,\n  useState,\n} from \"react\";\nimport { format } from \"date-fns\";\nimport { Percent } from \"./Investments\";\nimport styles from \"./styles.module.scss\";\n\nconst getInvestmentTransaction =\n  ({\n    names,\n    rates,\n  }: {\n    names: Record<string, string>;\n    rates: Record<string, Record<string, number>>;\n  }) =>\n  ({\n    date,\n    investment_id,\n    value,\n  }: {\n    date: string;\n    investment_id: number;\n    value: number;\n  }) => {\n    if (!rates[investment_id]) {\n      return null;\n    }\n    const unitValue = rates[investment_id][date];\n    const round = 1000;\n    const units = Math.round((round * value) / unitValue) / round;\n    return {\n      name: names[investment_id],\n      date: new Date(date),\n      investment_id,\n      value: Math.round(100 * units * unitValue) / 100,\n      valueNetto: value,\n      valueBrutto: value,\n      unitValue,\n      units,\n    };\n  };\n\nexport default function Transactions({\n  transactions,\n  rates,\n  names,\n  selected,\n  setSelected,\n}: {\n  transactions: { date: string; investment_id: number; value: number }[];\n  names: Record<string, string>;\n  rates: Record<string, Record<string, number>>;\n  selected: number[];\n  setSelected: Function;\n}) {\n  const [expanded, setExpanded] = useState<number[]>([]);\n\n  const quotes = useMemo(\n    () =>\n      Object.keys(rates).reduce((result, id) => {\n        const [date, unitValue] = Object.entries(rates[id]).pop();\n\n        return Object.assign(result, {\n          [id]: {\n            date: new Date(date),\n            unitValue,\n          },\n        });\n      }, {}),\n    [rates]\n  );\n\n  const list = useMemo(\n    () =>\n      transactions\n        .map(getInvestmentTransaction({ names, rates }))\n        .filter(Boolean),\n    [transactions, names, rates]\n  );\n\n  return (\n    <div className={styles.Transactions}>\n      <h3>Transactions</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>\n              <input\n                type=\"checkbox\"\n                checked={selected.length === transactions.length}\n                onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                  ({ target }) =>\n                    setSelected(\n                      target.checked ? transactions.map((_, i) => i) : []\n                    ),\n                  []\n                )}\n              />\n            </th>\n            <th>Fundusz</th>\n            <th>Kwota transakcji</th>\n            <th>Liczba jednostek</th>\n            <th>Data wyceny jednostki</th>\n            <th>Wycena jednostki</th>\n            <th>Wartość</th>\n            <th>Data wyceny jednostki</th>\n            <th>Wycena jednostki</th>\n            <th>Wartość</th>\n            <th>%</th>\n          </tr>\n          {list.map((item, i) =>\n            [\n              <tr key={i}>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    checked={selected.includes(i)}\n                    onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                      ({ target }) =>\n                        setSelected((selected: number[]) =>\n                          !target.checked\n                            ? selected.filter((n) => n !== i)\n                            : selected.concat(i)\n                        ),\n                      []\n                    )}\n                  />\n                </td>\n                <td>\n                  <a\n                    href=\"#\"\n                    onClick={useCallback<MouseEventHandler>(\n                      (e) => (\n                        e.preventDefault(),\n                        setExpanded((expanded) =>\n                          expanded.includes(i)\n                            ? expanded.filter((n) => n !== i)\n                            : expanded.concat(i)\n                        )\n                      ),\n                      []\n                    )}\n                  >\n                    {item.name}\n                  </a>\n                </td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(item.valueNetto)}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {}).format(item.units)}\n                </td>\n                <td align=\"right\">{format(item.date, \"dd.MM.yyyy\")}</td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(item.unitValue)}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(item.value)}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  {format(quotes[item.investment_id].date, \"dd.MM.yyyy\")}\n                </td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(quotes[item.investment_id].unitValue)}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  {new Intl.NumberFormat(\"pl-PL\", {\n                    minimumFractionDigits: 2,\n                  }).format(\n                    Math.round(\n                      100 * quotes[item.investment_id].unitValue * item.units\n                    ) / 100\n                  )}\n                  &nbsp;PLN\n                </td>\n                <td align=\"right\">\n                  <Percent\n                    value={\n                      quotes[item.investment_id].unitValue / item.unitValue - 1\n                    }\n                  />\n                </td>\n              </tr>,\n            ].concat(\n              expanded.includes(i)\n                ? [\n                    <tr key={`${i}-details`}>\n                      <td></td>\n                      <td colSpan={10}>\n                        {/* <pre>{JSON.stringify(rates[investment_id], null, 2)}</pre> */}\n                        <pre>\n                          {`Data wyceny jednostki\n${format(item.date, \"dd.MM.yyyy\")}\nData realizacji\n${format(item.date, \"dd.MM.yyyy\")}\nKwota transakcji netto w PLN\n${new Intl.NumberFormat(\"pl-PL\", {\n  minimumFractionDigits: 2,\n}).format(item.valueNetto)} PLN\nKwota transakcji brutto w PLN\n${new Intl.NumberFormat(\"pl-PL\", {\n  minimumFractionDigits: 2,\n}).format(item.valueBrutto)} PLN\nIlość jednostek po transakcji\n${new Intl.NumberFormat(\"pl-PL\", {}).format(item.units)}\nWartość jednostki w dniu wyceny\n${new Intl.NumberFormat(\"pl-PL\", {\n  minimumFractionDigits: 2,\n}).format(item.unitValue)} PLN\nWartość\n${new Intl.NumberFormat(\"pl-PL\", {\n  minimumFractionDigits: 2,\n}).format(item.value)} PLN\nOpłata manipulacyjna\n0,00 PLN / 0 %`}\n                        </pre>\n                      </td>\n                    </tr>,\n                  ]\n                : []\n            )\n          )}\n        </tbody>\n        <tfoot>\n          {[\n            list\n              .filter((_, i) => selected.includes(i))\n              .reduce(\n                ({ units, value, valueNetto, quote }, item) => ({\n                  units: units + item.units,\n                  value: value + item.value,\n                  valueNetto: valueNetto + item.valueNetto,\n                  quote:\n                    quote +\n                    Math.round(\n                      100 * quotes[item.investment_id].unitValue * item.units\n                    ) /\n                      100,\n                }),\n                {\n                  units: 0,\n                  value: 0,\n                  valueNetto: 0,\n                  quote: 0,\n                }\n              ),\n          ].map((item, i) => (\n            <tr key={i}>\n              <td></td>\n              <td></td>\n              <td align=\"right\">\n                {new Intl.NumberFormat(\"pl-PL\", {\n                  minimumFractionDigits: 2,\n                }).format(item.valueNetto)}\n                &nbsp;PLN\n              </td>\n              <td align=\"right\">\n                {new Intl.NumberFormat(\"pl-PL\", {\n                  minimumFractionDigits: 2,\n                }).format(item.units)}\n              </td>\n              <td colSpan={2}></td>\n              <td align=\"right\">\n                {new Intl.NumberFormat(\"pl-PL\", {\n                  minimumFractionDigits: 2,\n                }).format(item.value)}\n                &nbsp;PLN\n              </td>\n              <td colSpan={2}></td>\n              <td align=\"right\">\n                {new Intl.NumberFormat(\"pl-PL\", {\n                  minimumFractionDigits: 2,\n                }).format(item.quote)}\n                &nbsp;PLN\n              </td>\n              <td align=\"right\">\n                <Percent value={item.quote / item.value - 1} />\n              </td>\n            </tr>\n          ))}\n        </tfoot>\n      </table>\n    </div>\n  );\n}\n","import React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged, map } from \"rxjs/operators\";\nimport { createAsset } from \"use-asset\";\nimport { format, sub } from \"date-fns\";\nimport Chart, { SyncZoomProvider } from \"../../components/ZoomableLineChart\";\nimport DonutChart from \"../../components/DonutChart\";\nimport Investments from \"./Investments\";\nimport Transactions from \"./Transactions\";\nimport styles from \"./styles.module.scss\";\n\nimport type { Meta, Item } from \"@dev/cli/src/services/QuotesService/types\";\n\nconst ERA = 24 * 3600 * 1000;\nconst DAYS = 1200;\n\n// https://github.com/pmndrs/use-asset#dealing-with-async-assets\nconst asset = createAsset(async (version) => {\n  const res = await fetch(`api/quotes/data.json?${version}`);\n  return await res.json().then(({ metas, objects }) => ({\n    metas,\n    objects: objects.concat([\n      {\n        date: \"2022-06-23\",\n        // \"roi\": -29.59,\n        // \"unit\": \"A\",\n        // value: 70.55,\n        value: 68.65,\n        // \"id\": \"investments-10-2022-06-22\",\n        investment_id: 10,\n      },\n    ]),\n  }));\n});\n\nconst getInvestmentTransactionValue =\n  ({\n    date: valueDate,\n    rates,\n  }: {\n    date: Date;\n    rates: Record<string, Record<string, number>>;\n  }) =>\n  ({\n    date,\n    investment_id,\n    value,\n  }: {\n    date: string;\n    investment_id: number;\n    value: number;\n  }) => {\n    if (!rates[investment_id]) {\n      return null;\n    }\n    const unitValue = rates[investment_id][date];\n    const round = 1000;\n    const units = Math.round((round * value) / unitValue) / round;\n    const unitValueDate = rates[investment_id][format(valueDate, \"yyyy-MM-dd\")];\n    return rates[investment_id][format(valueDate, \"yyyy-MM-dd\")]\n      ? {\n          investment_id,\n          value: Math.round(100 * units * unitValueDate) / 100,\n        }\n      : null;\n  };\n\nfunction Data({ version = \"v1\" }) {\n  const { metas, objects: results } = asset.read(version) as {\n    metas: Meta[];\n    objects: Item[];\n  };\n\n  const [transactions] = useState(() => [\n    { date: \"2018-12-28\", investment_id: 44, value: 5331.6 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2019-12-30\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2020-12-28\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2021-12-15\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2022-01-03\", investment_id: 75, value: 1000 }, // PKO Akcji Rynku Amerykańskiego\n    { date: \"2022-02-01\", investment_id: 75, value: 1000 }, // PKO Akcji Rynku Amerykańskiego\n    { date: \"2022-02-28\", investment_id: 34, value: 1000 }, // PKO Surowców Globalny\n    { date: \"2022-03-08\", investment_id: 35, value: 1000 }, // PKO Technologii i Innowacji Globalny\n    { date: \"2022-03-11\", investment_id: 10, value: 1000 }, // PKO Akcji Nowa Europa\n    { date: \"2022-03-21\", investment_id: 36, value: 1000 }, // PKO Dóbr Luksusowych Globalny\n    { date: \"2022-03-21\", investment_id: 37, value: 1000 }, // PKO Infrastruktury i Budownictwa Globalny\n    { date: \"2022-04-01\", investment_id: 34, value: 1000 }, // PKO Surowców Globalny\n    { date: \"2022-04-11\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2022-04-26\", investment_id: 34, value: 1000 }, // PKO Surowców Globalny\n    { date: \"2022-05-05\", investment_id: 75, value: 1000 }, // PKO Akcji Rynku Amerykańskiego\n    { date: \"2022-06-20\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2022-06-23\", investment_id: 10, value: -907.62 }, // PKO Akcji Nowa Europa\n    { date: \"2022-06-23\", investment_id: 33, value: 907.62 }, // PKO Akcji Plus\n    { date: \"2022-07-29\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n    { date: \"2022-08-29\", investment_id: 44, value: 1000 }, // PKO Zabezpieczenia Emerytalnego 2050\n  ]);\n\n  const options = useMemo(\n    () => ({\n      investment: metas\n        .map(({ id, name }) => ({ id, name }))\n        .sort((a, b) => a.name.localeCompare(b.name)),\n    }),\n    [results]\n  );\n\n  const names = useMemo(\n    () =>\n      metas.reduce(\n        (result: Record<string, string>, { id, name }) =>\n          Object.assign(result, {\n            [id]: name,\n          }),\n        {}\n      ),\n    [metas]\n  );\n\n  const rates = useMemo(\n    () =>\n      results\n        .sort((a, b) => a.date.localeCompare(b.date))\n        .reduce(\n          (\n            result: Record<string, Record<string, number>>,\n            { date, investment_id, value }\n          ) =>\n            Object.assign(result, {\n              [investment_id]: Object.assign(result[investment_id] || {}, {\n                [date]: value,\n              }),\n            }),\n          {}\n        ),\n    [results]\n  );\n\n  const [filters, setFilters] = useState(() => ({\n    // investment: options.investment[0].id,\n    // related: options.investment[0].id,\n    search: \"\",\n  }));\n\n  const [queries, setQueries] = useState(() => filters);\n\n  const search$ = useMemo(() => new Subject<any>(), []);\n\n  useEffect(() => {\n    const subscription = search$\n      .pipe(\n        map(({ search, ...filters }) =>\n          JSON.stringify({ ...queries, ...filters, search: search.trim() })\n        ),\n        distinctUntilChanged(),\n        debounceTime(400)\n      )\n      .subscribe((filters) =>\n        setQueries((queries) => ({ ...queries, ...JSON.parse(filters) }))\n      );\n    return () => subscription.unsubscribe();\n  }, [search$]);\n\n  useEffect(() => {\n    search$.next(filters);\n  }, [filters]);\n\n  console.log({ metas, options, filters, results, rates });\n\n  const unified = useMemo(\n    () =>\n      results\n        .map(({ investment_id, value, date }) => ({\n          investment_id,\n          value,\n          date: new Date(date),\n        }))\n        .sort(\n          (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()\n        ),\n    [results]\n  );\n\n  const from = useMemo(\n    () => unified[unified.length - 1].date.getTime() - ERA * 2000,\n    [unified]\n  );\n\n  const [selected, setSelected] = useState<number[]>(() =>\n    transactions.map((_, i) => i)\n  );\n  const [selectedDate, setSelectedDate] = useState<string>(() =>\n    format(unified[unified.length - 1].date.getTime(), \"yyyy-MM-dd\")\n  );\n  const [investmentsSelected, setInvestmentsSelected] = useState<number[]>(\n    () => [34, 35, 79]\n  );\n\n  const list = useMemo(\n    () =>\n      unified\n        .filter(({ investment_id }) =>\n          investmentsSelected.includes(investment_id)\n        )\n        .filter(({ date }) => date.getTime() > from),\n    [unified, investmentsSelected]\n  );\n\n  // const relation = useMemo(\n  //   () =>\n  //     Object.entries(\n  //       unified.reduce(\n  //         (result, { date, investment_id, value }) =>\n  //           Object.assign(result, {\n  //             [format(date, \"yyyy-MM-dd\")]: Object.assign(\n  //               result[format(date, \"yyyy-MM-dd\")] || {},\n  //               {\n  //                 [investment_id]: value,\n  //               }\n  //             ),\n  //           }),\n  //         {}\n  //       )\n  //     )\n  //       .map(([date, investments]) => ({\n  //         date: new Date(date),\n  //         value: investments[filters.investment] / investments[filters.related],\n  //       }))\n  //       .filter(({ date }) => date.getTime() > from),\n  //   [unified, filters]\n  // );\n\n  const getRelatedValue = useCallback((values, date, selectedDate) => {\n    const formattedDate = format(date, \"yyyy-MM-dd\");\n    if (values[formattedDate] && values[selectedDate]) {\n      return values[formattedDate] / values[selectedDate];\n    }\n    return 0;\n  }, []);\n\n  return (\n    <div>\n      <SyncZoomProvider>\n        {/* <fieldset>\n          <label>\n            <span>Investment</span>\n            <select\n              value={filters.investment}\n              onChange={useCallback<ChangeEventHandler<HTMLSelectElement>>(\n                ({ target }) =>\n                  setFilters((filters) => ({\n                    ...filters,\n                    investment: Number(target.value),\n                  })),\n                []\n              )}\n            >\n              {options.investment.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </fieldset> */}\n        <Chart\n          list={list.map(({ investment_id, ...item }) => ({\n            ...item,\n            group: names[investment_id],\n          }))}\n          legend\n          rule\n        />\n        <fieldset>\n          {/* <label>\n            <span>Related</span>\n            <select\n              value={filters.related}\n              onChange={useCallback<ChangeEventHandler<HTMLSelectElement>>(\n                ({ target }) =>\n                  setFilters((filters) => ({\n                    ...filters,\n                    related: Number(target.value),\n                  })),\n                []\n              )}\n            >\n              {options.investment.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n          <button\n            onClick={useCallback<MouseEventHandler>(\n              (e) => (\n                e.preventDefault(),\n                setFilters(({ investment, related, ...filters }) => ({\n                  ...filters,\n                  investment: related,\n                  related: investment,\n                }))\n              ),\n              []\n            )}\n          >\n            reverse\n          </button> */}\n          <label>\n            <span>Date</span>\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                ({ target }) => setSelectedDate(target.value),\n                []\n              )}\n            />\n          </label>\n        </fieldset>\n        <Chart\n          list={unified\n            .filter(({ investment_id }) =>\n              investmentsSelected.includes(investment_id)\n            )\n            .filter(({ date }) => date.getTime() > from)\n\n            .map(({ investment_id, ...item }) => ({\n              ...item,\n              value: getRelatedValue(\n                rates[investment_id],\n                item.date,\n                selectedDate\n              ),\n              group: names[investment_id],\n            }))}\n          rule\n        />\n        {/* <fieldset>\n          <label>\n            <span>Search</span>\n            <input\n              type=\"search\"\n              value={filters.search}\n              onChange={useCallback<ChangeEventHandler<HTMLInputElement>>(\n                ({ target }) =>\n                  setFilters((filters) => ({\n                    ...filters,\n                    search: target.value,\n                  })),\n                []\n              )}\n            />\n          </label>\n        </fieldset> */}\n        <Investments\n          investments={options.investment}\n          rates={rates}\n          selected={investmentsSelected}\n          setSelected={setInvestmentsSelected}\n        />\n      </SyncZoomProvider>\n      <SyncZoomProvider>\n        <Chart\n          list={[...Array(DAYS)]\n            .map((_, i) =>\n              sub(new Date(), {\n                days: i,\n              })\n            )\n            .reverse()\n            .map((date, i) =>\n              Object.entries(\n                transactions\n                  .filter(\n                    (transaction, i) =>\n                      new Date(transaction.date) <= date && selected.includes(i)\n                  )\n                  .map(getInvestmentTransactionValue({ date, rates }))\n                  .filter(Boolean)\n                  .reduce(\n                    (\n                      result: Record<string, number>,\n                      { value, investment_id }\n                    ) =>\n                      Object.assign(result, {\n                        [investment_id]: (result[investment_id] || 0) + value,\n                      }),\n                    {}\n                  )\n              ).map(([investment_id, value]) => ({\n                date,\n                group: names[investment_id],\n                value,\n              }))\n            )\n            .flat()}\n        />\n        <Chart\n          list={[...Array(DAYS)]\n            .map((_, i) =>\n              sub(new Date(), {\n                days: i,\n              })\n            )\n            .reverse()\n            .map((date) =>\n              Object.entries(\n                transactions\n                  .filter(\n                    (transaction, i) =>\n                      new Date(transaction.date) <= date && selected.includes(i)\n                  )\n                  .map(getInvestmentTransactionValue({ date, rates }))\n                  .filter(Boolean)\n                  .reduce(\n                    (result, { value }, i) =>\n                      Object.assign(result, {\n                        [i]: value,\n                      }),\n                    {}\n                  )\n              ).map(([group, value], i, list) =>\n                ((value2) => ({\n                  date,\n                  group,\n                  value: value + value2,\n                  value2,\n                }))(\n                  list\n                    .slice(0, i)\n                    .reduce((result, [_, value]) => result + value, 0)\n                )\n              )\n            )\n            .flat()}\n          type=\"area\"\n          legend\n        />\n        <Transactions\n          transactions={transactions}\n          rates={rates}\n          names={names}\n          selected={selected}\n          setSelected={setSelected}\n        />\n      </SyncZoomProvider>\n      <DonutChart\n        list={Object.entries(\n          transactions\n            .filter((_, i) => selected.includes(i))\n            .reduce(\n              (list: Record<number, number>, item) =>\n                Object.assign(list, {\n                  [item.investment_id]:\n                    (list[item.investment_id] || 0) + item.value,\n                }),\n              {}\n            )\n        )\n          .map(([investment_id, value]) => ({\n            label: names[investment_id],\n            value,\n          }))\n          .sort((a, b) => b.value - a.value)}\n      />\n      {/* <pre>{JSON.stringify(metas, null, 2)}</pre> */}\n      {/* <pre>{JSON.stringify(list.slice(0, 5), null, 2)}</pre> */}\n    </div>\n  );\n}\n\nexport default function Section() {\n  return (\n    <div className={styles.Section}>\n      <h2>Quotes</h2>\n      <Data />\n    </div>\n  );\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".D4hghWDR6tislQFHDqDO{position:relative;padding:2em}.D4hghWDR6tislQFHDqDO svg{display:block;width:100%;height:300px;background:#f7f7f7;overflow:visible}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/DonutChart/styles.module.scss\"],\"names\":[],\"mappings\":\"AAAA,sBACE,iBAAA,CACA,WAAA,CAEA,0BACE,aAAA,CACA,UAAA,CACA,YAAA,CACA,kBAAA,CACA,gBAAA\",\"sourcesContent\":[\".Chart {\\n  position: relative;\\n  padding: 2em;\\n\\n  svg {\\n    display: block;\\n    width: 100%;\\n    height: 300px;\\n    background: #f7f7f7;\\n    overflow: visible;\\n\\n    //   rect.selection {\\n    //     stroke: none;\\n    //   }\\n  }\\n\\n  // .Tooltip {\\n  //   position: absolute;\\n  // }\\n}\\n// .Tooltip {\\n//   background: white;\\n//   border: 1px solid lightgray;\\n//   color: orange;\\n//   padding: 0.25em;\\n// }\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Chart\": \"D4hghWDR6tislQFHDqDO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._ESpGSPPpzgrCHtLDC15{color:purple}.TdrVPL_ZKxEpsGqtgAKw,.XpEtlXAz0qkmc2pUZelh{font-family:Arial,Helvetica,sans-serif;font-size:.7em}.TdrVPL_ZKxEpsGqtgAKw table,.XpEtlXAz0qkmc2pUZelh table{border-collapse:collapse}.TdrVPL_ZKxEpsGqtgAKw table tr:hover,.XpEtlXAz0qkmc2pUZelh table tr:hover{background-color:#e0e0e0}.TdrVPL_ZKxEpsGqtgAKw tr:nth-child(even),.XpEtlXAz0qkmc2pUZelh tr:nth-child(even){background-color:#f7f7f7}.TdrVPL_ZKxEpsGqtgAKw th,.TdrVPL_ZKxEpsGqtgAKw td,.XpEtlXAz0qkmc2pUZelh th,.XpEtlXAz0qkmc2pUZelh td{padding:.25em}.B5XUoft7ajzWeLY9QZQ9{clear:both;padding:.5em 0;border:2px solid rgba(0,0,0,0);margin:.5em}.MXCudOGdPDTJtcb0KFtk{color:#000;text-align:right;width:4.5em}.MXCudOGdPDTJtcb0KFtk.oGGbruZcUCrKnRswgvhX{color:blue}.MXCudOGdPDTJtcb0KFtk.LFTPI4HvrN257b34VKog{color:green}.MXCudOGdPDTJtcb0KFtk.LFTPI4HvrN257b34VKog::before{content:\\\"↖\\\"}.MXCudOGdPDTJtcb0KFtk.IYciZuUEzLYtaU3GzLql{color:red}.MXCudOGdPDTJtcb0KFtk.IYciZuUEzLYtaU3GzLql::before{content:\\\"↘\\\"}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/containers/Quotes/styles.module.scss\"],\"names\":[],\"mappings\":\"AAAA,sBAAA,YACE,CAAA,4CAEF,sCAEE,CAAA,cACA,CAAA,wDACA,wBACE,CAAA,0EAEE,wBACE,CAAA,kFAKJ,wBACE,CAAA,oGAGJ,aAEE,CAAA,sBAGJ,UACE,CAAA,cACA,CAAA,8BACA,CAAA,WACA,CAAA,sBAEF,UACE,CAAA,gBACA,CAAA,WACA,CAAA,2CACA,UACE,CAAA,2CAEF,WACE,CAAA,mDACA,WACE,CAAA,2CAGJ,SACE,CAAA,mDACA,WACE\",\"sourcesContent\":[\".Section {\\n  color: purple;\\n}\\n.Investments,\\n.Transactions {\\n  font-family: Arial, Helvetica, sans-serif;\\n  font-size: 0.7em;\\n  table {\\n    border-collapse: collapse;\\n    tr {\\n      &:hover {\\n        background-color: #e0e0e0;\\n      }\\n    }\\n  }\\n  tr {\\n    &:nth-child(even) {\\n      background-color: #f7f7f7;\\n    }\\n  }\\n  th,\\n  td {\\n    padding: 0.25em;\\n  }\\n}\\n.Row {\\n  clear: both;\\n  padding: 0.5em 0;\\n  border: 2px solid transparent;\\n  margin: 0.5em;\\n}\\n.Percent {\\n  color: black;\\n  text-align: right;\\n  width: 4.5em;\\n  &.eq {\\n    color: blue;\\n  }\\n  &.gt {\\n    color: green;\\n    &::before {\\n      content: \\\"\\\\2196\\\";\\n    }\\n  }\\n  &.lt {\\n    color: red;\\n    &::before {\\n      content: \\\"\\\\2198\\\";\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Section\": \"_ESpGSPPpzgrCHtLDC15\",\n\t\"Investments\": \"TdrVPL_ZKxEpsGqtgAKw\",\n\t\"Transactions\": \"XpEtlXAz0qkmc2pUZelh\",\n\t\"Row\": \"B5XUoft7ajzWeLY9QZQ9\",\n\t\"Percent\": \"MXCudOGdPDTJtcb0KFtk\",\n\t\"eq\": \"oGGbruZcUCrKnRswgvhX\",\n\t\"gt\": \"LFTPI4HvrN257b34VKog\",\n\t\"lt\": \"IYciZuUEzLYtaU3GzLql\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return operate(function (source, subscriber) {\n        var activeTask = null;\n        var lastValue = null;\n        var lastTime = null;\n        var emit = function () {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            var targetTime = lastTime + dueTime;\n            var now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, function () {\n            emit();\n            subscriber.complete();\n        }, undefined, function () {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n//# sourceMappingURL=debounceTime.js.map","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector) {\n    if (keySelector === void 0) { keySelector = identity; }\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate(function (source, subscriber) {\n        var previousKey;\n        var first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","Chart","list","groupRef","useRef","useEffect","createPie","d3","value","d","sort","createArc","innerRadius","outerRadius","colors","data","groupWithData","current","selectAll","exit","remove","groupWithUpdate","enter","append","attr","merge","select","i","centroid","style","text","label","className","cx","styles","ref","transform","getValueNearDate","values","date","format","sub","days","Percent","isNaN","Intl","NumberFormat","minimumFractionDigits","Math","round","Investments","investments","rates","selected","setSelected","useState","expanded","setExpanded","useMemo","map","item","Object","entries","id","pop","unitValue","Date","type","checked","length","onChange","useCallback","target","key","includes","concat","filter","href","onClick","e","preventDefault","name","align","months","colSpan","JSON","stringify","Transactions","transactions","names","quotes","keys","reduce","result","assign","investment_id","units","valueNetto","valueBrutto","getInvestmentTransaction","Boolean","_","n","quote","asset","createAsset","version","fetch","res","json","then","metas","objects","getInvestmentTransactionValue","valueDate","unitValueDate","Data","read","results","investment","a","b","localeCompare","search","filters","queries","setQueries","search$","Subject","subscription","pipe","trim","distinctUntilChanged","debounceTime","subscribe","parse","unsubscribe","next","console","log","unified","getTime","from","ERA","selectedDate","setSelectedDate","investmentsSelected","setInvestmentsSelected","getRelatedValue","formattedDate","group","legend","rule","Array","reverse","transaction","flat","value2","slice","Section","___CSS_LOADER_EXPORT___","push","module","locals","addDays","dirtyDate","dirtyAmount","arguments","amount","NaN","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","subDays","requiredArgs","toInteger","subMonths","_typeof","obj","Symbol","iterator","constructor","prototype","duration","years","weeks","hours","minutes","seconds","dateWithoutMonths","dateWithoutDays","minutestoSub","secondstoSub","mstoSub","finalDate","dueTime","scheduler","source","subscriber","activeTask","lastValue","lastTime","emit","emitWhenIdle","targetTime","now","this","schedule","add","complete","comparator","keySelector","defaultCompare","previousKey","first","currentKey","project","thisArg","index","call"],"sourceRoot":""}